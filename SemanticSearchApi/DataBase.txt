-- Database Schema - Student Domain (for testing the dynamic system)
-- The code will discover this schema dynamically without any hardcoded assumptions

-- Drop existing tables if they exist
DROP TABLE IF EXISTS StudentGradeSubject;
DROP TABLE IF EXISTS Subject;
DROP TABLE IF EXISTS Student;

-- Student table
CREATE TABLE Student (
    StudentId INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(50) NOT NULL
);

-- Subject table
CREATE TABLE Subject (
    SubjectId INT PRIMARY KEY IDENTITY(1,1),
    Title NVARCHAR(50) NOT NULL
);

-- StudentGradeSubject junction table
CREATE TABLE StudentGradeSubject (
    Id INT PRIMARY KEY IDENTITY(1,1),
    StudentId INT NOT NULL,
    SubjectId INT NOT NULL,
    GradeId INT NOT NULL,
    FOREIGN KEY (StudentId) REFERENCES Student(StudentId),
    FOREIGN KEY (SubjectId) REFERENCES Subject(SubjectId),
    CHECK (GradeId BETWEEN 1 AND 5)
);

-- Insert test data - Students
INSERT INTO Student (Name) VALUES 
('Anjali'),
('Kavya'),
('Nalini'),
('Madhu'),
('Prasad');

-- Insert test data - Subjects
INSERT INTO Subject (Title) VALUES 
('Maths'),
('Science'),
('Geography'),
('English');

-- Insert 500 rows of test data
-- Batch 1: 100 records
INSERT INTO StudentGradeSubject (StudentId, SubjectId, GradeId) VALUES 
(1, 1, 4), (1, 2, 5), (1, 3, 3), (1, 4, 4), (1, 1, 5), (1, 2, 4), (1, 3, 4), (1, 4, 3), (1, 1, 3), (1, 2, 4),
(1, 3, 5), (1, 4, 4), (1, 1, 4), (1, 2, 3), (1, 3, 4), (1, 4, 5), (1, 1, 5), (1, 2, 4), (1, 3, 3), (1, 4, 4),
(2, 1, 5), (2, 2, 4), (2, 3, 5), (2, 4, 4), (2, 1, 3), (2, 2, 5), (2, 3, 4), (2, 4, 5), (2, 1, 4), (2, 2, 3),
(2, 3, 4), (2, 4, 5), (2, 1, 5), (2, 2, 4), (2, 3, 3), (2, 4, 4), (2, 1, 5), (2, 2, 5), (2, 3, 4), (2, 4, 3),
(3, 1, 2), (3, 2, 3), (3, 3, 2), (3, 4, 3), (3, 1, 4), (3, 2, 2), (3, 3, 3), (3, 4, 2), (3, 1, 3), (3, 2, 4),
(3, 3, 2), (3, 4, 3), (3, 1, 2), (3, 2, 3), (3, 3, 4), (3, 4, 2), (3, 1, 3), (3, 2, 2), (3, 3, 3), (3, 4, 4),
(4, 1, 3), (4, 2, 4), (4, 3, 3), (4, 4, 4), (4, 1, 5), (4, 2, 3), (4, 3, 4), (4, 4, 3), (4, 1, 4), (4, 2, 5),
(4, 3, 3), (4, 4, 4), (4, 1, 3), (4, 2, 4), (4, 3, 5), (4, 4, 3), (4, 1, 4), (4, 2, 3), (4, 3, 4), (4, 4, 5),
(5, 1, 1), (5, 2, 2), (5, 3, 1), (5, 4, 2), (5, 1, 3), (5, 2, 1), (5, 3, 2), (5, 4, 1), (5, 1, 2), (5, 2, 3),
(5, 3, 1), (5, 4, 2), (5, 1, 1), (5, 2, 2), (5, 3, 3), (5, 4, 1), (5, 1, 2), (5, 2, 1), (5, 3, 2), (5, 4, 3);

-- Continue with more batches to reach 500 records total
-- Batch 2: Another 100 records
INSERT INTO StudentGradeSubject (StudentId, SubjectId, GradeId) VALUES 
(1, 1, 3), (1, 2, 4), (1, 3, 5), (1, 4, 3), (1, 1, 4), (1, 2, 3), (1, 3, 4), (1, 4, 5), (1, 1, 5), (1, 2, 4),
(1, 3, 3), (1, 4, 4), (1, 1, 4), (1, 2, 5), (1, 3, 4), (1, 4, 3), (1, 1, 3), (1, 2, 4), (1, 3, 5), (1, 4, 4),
(2, 1, 4), (2, 2, 3), (2, 3, 4), (2, 4, 5), (2, 1, 5), (2, 2, 4), (2, 3, 3), (2, 4, 4), (2, 1, 4), (2, 2, 5),
(2, 3, 4), (2, 4, 3), (2, 1, 3), (2, 2, 4), (2, 3, 5), (2, 4, 4), (2, 1, 4), (2, 2, 3), (2, 3, 4), (2, 4, 5),
(3, 1, 1), (3, 2, 2), (3, 3, 1), (3, 4, 2), (3, 1, 3), (3, 2, 1), (3, 3, 2), (3, 4, 1), (3, 1, 2), (3, 2, 3),
(3, 3, 1), (3, 4, 2), (3, 1, 1), (3, 2, 2), (3, 3, 3), (3, 4, 1), (3, 1, 2), (3, 2, 1), (3, 3, 2), (3, 4, 3),
(4, 1, 4), (4, 2, 3), (4, 3, 4), (4, 4, 5), (4, 1, 3), (4, 2, 4), (4, 3, 3), (4, 4, 4), (4, 1, 5), (4, 2, 3),
(4, 3, 4), (4, 4, 3), (4, 1, 4), (4, 2, 5), (4, 3, 3), (4, 4, 4), (4, 1, 3), (4, 2, 4), (4, 3, 5), (4, 4, 3),
(5, 1, 2), (5, 2, 1), (5, 3, 2), (5, 4, 3), (5, 1, 1), (5, 2, 2), (5, 3, 1), (5, 4, 2), (5, 1, 3), (5, 2, 1),
(5, 3, 2), (5, 4, 1), (5, 1, 2), (5, 2, 3), (5, 3, 1), (5, 4, 2), (5, 1, 1), (5, 2, 2), (5, 3, 3), (5, 4, 1);

-- Continue inserting more batches... (I'll generate a script that creates all 500 records)
-- For brevity, I'm showing the pattern. The actual script would continue with similar patterns
-- to reach exactly 500 records with varied grade distributions.

-- Add more records to reach 500 total (300 more needed)
-- Batch 3-5: 300 more records with random but realistic distributions
DECLARE @Counter INT = 201;
DECLARE @StudentId INT;
DECLARE @SubjectId INT;
DECLARE @GradeId INT;

WHILE @Counter <= 500
BEGIN
    SET @StudentId = ((@Counter - 1) % 5) + 1;  -- Cycles through students 1-5
    SET @SubjectId = ((@Counter - 1) % 4) + 1;  -- Cycles through subjects 1-4
    
    -- Generate varied grades based on student pattern
    IF @StudentId = 1 SET @GradeId = CASE WHEN @Counter % 3 = 0 THEN 5 ELSE 4 END;  -- Anjali: mostly 4-5
    IF @StudentId = 2 SET @GradeId = CASE WHEN @Counter % 4 = 0 THEN 3 ELSE 5 END;  -- Kavya: mostly 5, some 3
    IF @StudentId = 3 SET @GradeId = CASE WHEN @Counter % 3 = 0 THEN 4 ELSE 2 END;  -- Nalini: mostly 2, some 4
    IF @StudentId = 4 SET @GradeId = CASE WHEN @Counter % 2 = 0 THEN 4 ELSE 3 END;  -- Madhu: mix of 3-4
    IF @StudentId = 5 SET @GradeId = CASE WHEN @Counter % 5 = 0 THEN 3 ELSE 1 END;  -- Prasad: mostly 1, some 3
    
    INSERT INTO StudentGradeSubject (StudentId, SubjectId, GradeId) VALUES (@StudentId, @SubjectId, @GradeId);
    
    SET @Counter = @Counter + 1;
END;

-- Verify the final count
SELECT 'Total Records' as Description, COUNT(*) as Count FROM StudentGradeSubject;