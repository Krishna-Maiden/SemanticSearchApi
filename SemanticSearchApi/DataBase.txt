-- Database Schema - Student Domain (for testing the dynamic system)
-- The code will discover this schema dynamically without any hardcoded assumptions

-- Drop existing tables if they exist
DROP TABLE IF EXISTS StudentGradeSubject;
DROP TABLE IF EXISTS Subject;
DROP TABLE IF EXISTS Student;

-- Student table
CREATE TABLE Student (
    StudentId INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(50) NOT NULL
);

-- Subject table
CREATE TABLE Subject (
    SubjectId INT PRIMARY KEY IDENTITY(1,1),
    Title NVARCHAR(50) NOT NULL
);

-- Insert test data - Students
INSERT INTO Student (Name) VALUES 
('Anjali'),
('Kavya'),
('Nalini'),
('Madhu'),
('Prasad');

-- Insert test data - Subjects
INSERT INTO Subject (Title) VALUES 
('Maths'),
('Science'),
('Geography'),
('English');

-- Alternative Schema: Add AssessmentDate to allow multiple records
-- This allows the same student to get the same grade in the same subject multiple times

-- Drop and recreate with assessment date
DROP TABLE IF EXISTS StudentGradeSubject;

-- StudentGradeSubject with assessment tracking
CREATE TABLE StudentGradeSubject (
    StudentId INT NOT NULL,
    SubjectId INT NOT NULL,
    GradeId INT NOT NULL,
    AssessmentDate DATE NOT NULL DEFAULT GETDATE(),
    PRIMARY KEY (StudentId, SubjectId, GradeId, AssessmentDate),
    FOREIGN KEY (StudentId) REFERENCES Student(StudentId),
    FOREIGN KEY (SubjectId) REFERENCES Subject(SubjectId),
    CHECK (GradeId BETWEEN 1 AND 5)
);

-- Insert 500 records with different assessment dates
DECLARE @Counter INT = 0;
DECLARE @StudentId INT;
DECLARE @SubjectId INT; 
DECLARE @GradeId INT;
DECLARE @AssessmentDate DATE;

-- Start from January 1, 2024
SET @AssessmentDate = '2024-01-01';

WHILE @Counter < 500
BEGIN
    -- Cycle through students (1-5)
    SET @StudentId = (@Counter % 5) + 1;
    
    -- Cycle through subjects (1-4)  
    SET @SubjectId = ((@Counter / 5) % 4) + 1;
    
    -- Generate grade based on student performance pattern
    IF @StudentId = 1 -- Anjali: mostly 4-5
        SET @GradeId = CASE WHEN @Counter % 3 = 0 THEN 3 WHEN @Counter % 2 = 0 THEN 5 ELSE 4 END;
    ELSE IF @StudentId = 2 -- Kavya: mostly 5
        SET @GradeId = CASE WHEN @Counter % 4 = 0 THEN 4 WHEN @Counter % 7 = 0 THEN 3 ELSE 5 END;
    ELSE IF @StudentId = 3 -- Nalini: mostly 2-3
        SET @GradeId = CASE WHEN @Counter % 5 = 0 THEN 4 WHEN @Counter % 6 = 0 THEN 1 WHEN @Counter % 2 = 0 THEN 3 ELSE 2 END;
    ELSE IF @StudentId = 4 -- Madhu: mostly 3-4
        SET @GradeId = CASE WHEN @Counter % 4 = 0 THEN 5 WHEN @Counter % 5 = 0 THEN 2 WHEN @Counter % 2 = 0 THEN 4 ELSE 3 END;
    ELSE -- Prasad: mostly 1-2
        SET @GradeId = CASE WHEN @Counter % 6 = 0 THEN 3 WHEN @Counter % 8 = 0 THEN 4 WHEN @Counter % 2 = 0 THEN 2 ELSE 1 END;
    
    -- Insert the record
    INSERT INTO StudentGradeSubject (StudentId, SubjectId, GradeId, AssessmentDate) 
    VALUES (@StudentId, @SubjectId, @GradeId, @AssessmentDate);
    
    -- Increment counter and date
    SET @Counter = @Counter + 1;
    SET @AssessmentDate = DATEADD(day, 1, @AssessmentDate);
END;

-- Verify the data
SELECT 'Total Records' as Description, COUNT(*) as Count FROM StudentGradeSubject
UNION ALL
SELECT 'Unique Student-Subject-Grade Combinations', COUNT(DISTINCT CONCAT(StudentId, '-', SubjectId, '-', GradeId)) FROM StudentGradeSubject;

-- Show distribution by student
SELECT 
    s.Name,
    COUNT(*) as TotalAssessments,
    AVG(CAST(sgs.GradeId as FLOAT)) as AverageGrade,
    MIN(sgs.GradeId) as LowestGrade,
    MAX(sgs.GradeId) as HighestGrade
FROM Student s
JOIN StudentGradeSubject sgs ON s.StudentId = sgs.StudentId
GROUP BY s.StudentId, s.Name
ORDER BY AverageGrade DESC;